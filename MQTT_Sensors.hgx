<?xml version="1.0" encoding="utf-16"?>
<ProgramBlock xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <ScriptSetup>IPHostEntry host;
string localIP = "1";
host = Dns.GetHostEntry(Dns.GetHostName());
foreach (IPAddress ip in host.AddressList)
{
  if (ip.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork)
  {
    localIP = ip.ToString();
    localIP = localIP.Substring(localIP.LastIndexOf(".") + 1);
  }
}
Program.Setup(() =&gt; {
  Program
    .AddOption("ClientId", "hg-" + localIP, "0. Enter unique ID for this client", "text")
    .AddOption("ServerAddress", "", "1. MQTT server address", "text")
    .AddOption("ServerPort", "1883", "2. MQTT server port", "text")
    .AddOption("TLS", "", "3. Connect using TLS/SSL", "checkbox")
    .AddOption("WebSockets", "", "4. Connect using WebSockets", "checkbox")
    .AddOption("ServerTopic", "#", "5. Topic", "text")
    .AddOption("Username", "", "6. Username (optional)", "text")
    .AddOption("Password", "", "7. Password (optional)", "text")
    .AddOption("LogEnable", "", "8. Enable log file", "checkbox")
    .AddOption("LogFilePath", "/home/pi/log/Sensors.log", "9. Log file location", "text")
    .AddFeature("", "", "MQTT.SensorPublish", "Publish this module events", "checkbox");
});
Program.Run();
</ScriptSetup>
  <ScriptSource>string server = Program.Option("ServerAddress").Value.Trim();
int port = 1883; int.TryParse(Program.Option("ServerPort").Value, out port);
string topic = Program.Option("ServerTopic").Value.Trim();
string clientid = Program.Option("ClientId").Value.Trim();
string username = Program.Option("Username").Value.Trim();
string password = Program.Option("Password").Value.Trim();
string LogFilePath = Program.Option("LogFilePath").Value.Trim();
bool LogEnabled = Program.Option("LogEnable").Value == "On" ? true : false;
bool useWebSockets = Program.Option("WebSockets").Value == "On" ? true : false;
bool useTls = Program.Option("TLS").Value == "On" ? true : false;

var MqttIsConnected = false;
MqttClient.Reset();


Action&lt;string, string&gt; 
Log = (string LogPath, string logtext) =&gt; {
  if (LogEnabled)
  {
    string text = DateTime.Now.ToLocalTime().ToString("yyyy/MM/dd HH:mm:ss.fffffff") + " ; " + logtext + "\n";
    System.IO.File.AppendAllText(LogPath, text);
  }
};


Action&lt;string, string, double&gt; 
WriteToSensor = (string sensorId, string dataType, double dataVal) =&gt; {
  // sensorId = module
  // dataType = parameter name
  // dataVal = parameter value
  var module = Modules.InDomain("MQTT:Sensors").WithAddress(sensorId).Get();
  if (module.Instance == null)
  {
    Program.AddVirtualModule("MQTT:Sensors", sensorId, "Sensor", "homegenie/generic/sensor");
    module = Modules.InDomain("MQTT:Sensors").WithAddress(sensorId).Get();
  }
//  if(module.Parameter(dataType).Value != dataVal.ToString("0.0")){
    module.Parameter(dataType).Value = dataVal.ToString("0.0");
    //Program.RaiseEvent(module, dataType, dataVal.ToString("0.0"), "");
//  }  
};


if (server == "")
{
  Program.Notify("Please configure server address");
  Pause(5);
  return;
}


MqttClient.Subscribe(topic, (mtopic, bytespayload) =&gt; {
  var parts = mtopic.Split('/');
  
  // convert binary message to string
  string mpayload = Encoding.UTF8.GetString(bytespayload);
  
  switch(parts[0])
  {
    case "rtl_433":
      switch(parts[1])
      {
        case "Acurite-5n1":
          var item = mpayload.Split(' ');
          string dataType = "";
		  double dataVal = 0;
          
          switch (parts[3])
          {
            case "temperature_F":
              dataType = "Sensor.Temperature";
              dataVal = (5.0 / 9.0) * (double.Parse(item[0]) - 32);
              WriteToSensor(parts[1],dataType,dataVal);
              break;

            case "wind_dir_deg":
              dataType = "Sensor.Winddir";
              dataVal = float.Parse(item[0]);
              WriteToSensor(parts[1],dataType,dataVal);
              break;

            case "wind_avg_km_h":
              dataType = "Sensor.Windspeed";
              dataVal = float.Parse(item[0]);
              WriteToSensor(parts[1],dataType,dataVal);
              break;

            case "humidity":
              dataType = "Sensor.Humidity";
              dataVal = float.Parse(item[0]);
              WriteToSensor(parts[1],dataType,dataVal);
              break;

            case "rain_in":
              dataType = "Sensor.Rainfall";
              dataVal = float.Parse(item[0]);
              WriteToSensor(parts[1],dataType,dataVal);
              break;

            case "battery_ok":
              dataType = "Status.Battery";
              dataVal = float.Parse(item[0])*100;
              WriteToSensor(parts[1],dataType,dataVal);
              break;
          }
          break;
        
        default:
          break;
      }
      break;
    
    case "GunSafe":
    case "GunSafe1":
    case "GunSafe2":
    case "GunSafe3":
      parts = mtopic.Split('/');

      // convert binary message to string
      mpayload = Encoding.UTF8.GetString(bytespayload);
      foreach (var data in mpayload.Split(','))
      {
        if (data.Length &gt; 0)
        {
          string dataType = "";
          double dataVal = 0;
          
          switch (parts[1])
          {
            case "temperature":
              dataType = "Sensor.Temperature";
              dataVal = double.Parse(mpayload);
            
              //Log(LogFilePath, mtopic + " " + dataType + " " + dataVal.ToString());
            break;
            
            case "humidity":
              dataType = "Sensor.Humidity";
              dataVal = float.Parse(mpayload);
            
              //Log(LogFilePath, mtopic + " " + dataType + " " + dataVal.ToString());
            break;
          }
          WriteToSensor(parts[0],dataType,dataVal);          
        }
      }
      break;
    
    
      /*
      case "blueline":
      foreach (var data in mpayload.Split(','))
      {
       	var item = data.Split('=');
        
        switch (item[0])
        {
          case "TempF":
            dataType = "Sensor.Temperature";
            dataVal = (5.0 / 9.0) * (double.Parse(item[1]) - 32);
          break;
          
          case "CurrentPower":
            dataType = "Meter.Watts";
            dataVal = float.Parse(item[1]);
          break;
          
          case "TotalEnergy":
            dataType = "Sensor.WattHours";
            dataVal = float.Parse(item[1]);
          break;
          
          case "Battery":
            dataType = "Status.Battery";
            dataVal = float.Parse(item[1])*100;
          break;

        }
        WriteToSensor(mtopic,dataType,dataVal);
      }
      break;

      case "acurite592tx":
      foreach (var data in mpayload.Split(','))
      {
        if (data.Length &gt; 0)
        {
          var item = data.Split('=');
          var channel = item[0].Substring(item[0].Length-1);

          switch (item[0].Substring(0,item[0].Length-1))
          {
            case "Temp":
              dataType = "Sensor.Temperature";
              dataVal = (5.0 / 9.0) * (double.Parse(item[1]) - 32);
            break;

            case "Battery":
              dataType = "Status.Battery";
              dataVal = float.Parse(item[1])*100;
            break;
          }
          WriteToSensor(mtopic+channel,dataType,dataVal);
        }
      }
      break;
      */    
    
 
    default:
      Program.Notify("MQTT message: default", mtopic);
      break;
  }
  

});

//Program.GoBackground();

while (Program.IsRunning) {
  if (!MqttIsConnected) {
    MqttIsConnected = true;
    Program.Notify("Connecting to '" + server + ":" + port + "' ...");
    try
    {
      if (username != "")
      {
        MqttClient.WithCredentials(username, password);
      }

      MqttClient
        .Service(server)
        .UsingWebSockets(useWebSockets)
        .WithTls(useTls)
        .Connect(port, clientid, (connected)=&gt;{
          MqttIsConnected = connected;
          if (connected) {
              Program.Notify("Connected!");
          } else {
              Program.Notify("Disconnected!");
          }
        });
    }
    catch (Exception e)
    {
      Program.Notify(e.Message);
      Pause(5);
      return;
    }
  }
  Pause(30);
}
</ScriptSource>
  <ScriptErrors />
  <Domain>HomeAutomation.HomeGenie.Automation</Domain>
  <Address>1001</Address>
  <Name>MQTT Sensors</Name>
  <Description>Share modules with other HomeGenie servers connected to the same MQTT network.
      Other servers will automatically inherit the published module once an event is generated from it.</Description>
  <Group>NEW</Group>
  <Features />
  <AutoRestartEnabled>false</AutoRestartEnabled>
  <ActivationTime xsi:nil="true" />
  <TriggerTime xsi:nil="true" />
  <Type>CSharp</Type>
  <IsEnabled>false</IsEnabled>
</ProgramBlock>